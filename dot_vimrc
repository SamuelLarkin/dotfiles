" vim:nowrap:

" Bookmarks
" http://www.vi-improved.org/vimrc.php
" [vim's filetype](https://raw.githubusercontent.com/vim/vim/master/runtime/filetype.vim)


" Mappings {
   " NOTE: Remapping leader has to be done before loading the plugins
   " Change <leader> from \ to space
   noremap <Space> <Nop>
   map <Space> <Leader>
   nmap <leader><tab> <plug>(fzf-maps-n)
" }


" PLUGINS
source ~/.config/vim/plugins.vim

" Fix pasting from the clipboard buffer
" {
     " [Why does <F22> appear when pasting into Vim?](https://vi.stackexchange.com/questions/25135/why-does-f22-appear-when-pasting-into-vim)
     " When this option is unset, Vim will disable bracketed paste mode by
     " sending the contents of the 't_BD' option to the terminal and the
     " terminal will then just send the contents of the clipboard with no
     " extra escape sequences when pasting.
     " :help t_BE
     "   t_BE    enable bracketed paste mode       t_BE 't_BE'
     "           xterm-bracketed-paste
     "   t_BD    disable bracketed paste mode      t_BD 't_BD'
     "           xterm-bracketed-paste
     set t_BE=
" }

" {
  " from nvim :h vim_diff.txt
  " neovim remaps Y to y$ which I hate.
  if has('nvim')
    unmap Y
  endif
  " [Nuking most of my .vimrc and just using LunarVim](https://fnune.com/2021/11/20/nuking-most-of-my-vimrc-and-just-using-lunarvim/)
  " Disable ex mode
  nnoremap Q <nop>
" }


" [Vim Error: E474: Invalid argument: listchars=tab:»·,trail:·](https://stackoverflow.com/a/18321539)
" {
   scriptencoding utf-8
   set encoding=utf-8
" }


" NOTE
" # Enable wdiff syntax highlighting.
" set syntax=wdiff

" commands {
" dit: delete inner tag for html
" d/<pattern>: delete from the cursor until the searched pattern
" }


" {
   "set formatoptions=tcoql
   "t: Auto-wrap text using textwidth
   "q: Allow formatting of comments with `gq`
   "l: Long lines are not broken in insert mode
   set formatoptions=tql
" }


" Basics {
   :syntax enable " syntax highlighting on
   set nocompatible " explicitly get out of vi-compatible mode

   set hidden " you can change buffers without saving
   set noerrorbells " don't make noise
   set smartcase " if there are caps, go case-sensitive

   " Put typical Portage directory structure in the search path for "gf"
   set nolist listchars=extends:«,tab:»·,trail:°
" }


" UI {
   set relativenumber   " Helps to quickly calculate line jumps
   set ruler
   set incsearch
   set hlsearch
   set scrolloff=2
   set laststatus=2 " Always display the status bar with filename and modification [+]
   set showmatch " show matching brackets

   " Command Mode auto completion {}
     " [Is there a version of Vim or plugin with a Command Mode auto completion?](https://vi.stackexchange.com/a/11424)
     set wildmenu
     set wildmode=longest,list,full
   " }

   "set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P " Change the statusline to also show unicode value of a character.
   "set statusline=%<%f%h%m%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%r%=%b\ 0x%B\ \ %l,%c%V\ %P " Change the statusline to also show unicode value of a character.
   if has("statusline")
      set statusline =          " clear
      set statusline+=%02n      " leading zero 2 digit buffer number
      "xset statusline+=\ %<%F    " file full path, truncate
      set statusline+=\ %t      " file tail
      set statusline+=[%{&ff}]  " [fileformat]
      set statusline+=%r        " read only flag '[RO]'
      set statusline+=%m        " modified flag '[+]' if modifiable
      set statusline+=%h        " help flag '[Help]'
      set statusline+=%=        " left/right separation point
      set statusline+=[%b       " decimal byte
      set statusline+=\ x%02B]  " hex byte ' \x62'
      set statusline+=\ %{(line('.')-1)%16} " line
      set statusline+=:%{(line('.')-1)/16}  " block
      set statusline+=\/%{line('$')/16}     " max block
      set statusline+=\ %c      " column number
      set statusline+=%V        " virtual column '-{n}'
      set statusline+=:%l/%L    " line/lines
      set statusline+=\ %p%%    " percent of file
      "xset statusline+=\ %P      " percent of file{4} Top | n% | Bot
      set statusline+=%{&hlsearch?'+':'-'}
      set statusline+=%{&paste?'=':'\ '}
      set statusline+=%{&wrap?'<':'>'}
   endif
   set statusline=
   set statusline+=%02n " leading zero 2 digit Buffer number.
   set statusline+=%<   " Where to truncate line if too long.  Default is at the start.  No width fields allowed.
   set statusline+=\ %f "Path to the file in the buffer, as typed or relative to current directory.
   set statusline+=%h   " Help buffer flag, text is "[help]".
   set statusline+=%m   " Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
   set statusline+=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\"}  " Adds [file's encoding(BOMB)?]
   set statusline+=%r   " Readonly flag, text is "[RO]".
   " http://vimcasts.org/episodes/fugitive-vim-browsing-the-git-object-database/
   " [Vim: Conditionally use fugitive#statusline function in vimrc](https://stackoverflow.com/questions/5983906/vim-conditionally-use-fugitivestatusline-function-in-vimrc)
   set statusline+=%{exists('g:loaded_fugitive')?FugitiveStatusline():''}
   if !has('nvim')
      set statusline+=%{has('taghelper#curtag')?taghelper#curtag():''}
   endif
   set statusline+=%=   " Separation point between left and right aligned items.  No width fields allowed.
   set statusline+=%b   " Value of byte under cursor.
   set statusline+=\ 0x%B   " Value of byte under cursor in hexadecimal.
   set statusline+=\ \ %l,%c   " Line number, Column number.
   set statusline+=%V   " Virtual column number as -{num}.  Not displayed if equal to 'c'.
   set statusline+=\ %P " Percentage through file of displayed window.  This is like the percentage described for 'ruler'.  Always 3 in length.
   set statusline+=%{&paste?'=':'\ '}
   set statusline+=%{&wrap?'<':'>'}

   " http://vim.wikia.com/wiki/Switch_color_schemes
   " Colors {
      :highlight Comment ctermfg=6 ctermbg=black
      set t_Co=256
      try
         "colorscheme asu1dark
         colorscheme desertink
      catch /^Vim\%((\a\+)\)\=:E185/
      endtry

      " [Xterm256 color names for console Vim](https://vim.fandom.com/wiki/Xterm256_color_names_for_console_Vim)
      " dark red
      hi tsxTagName ctermfg=52
      hi tsxComponentName ctermfg=52
      hi tsxCloseComponentName ctermfg=52

      " orange
      hi tsxCloseString ctermfg=214
      hi tsxCloseTag ctermfg=214
      hi tsxCloseTagName ctermfg=214
      hi tsxAttributeBraces ctermfg=214
      hi tsxEqual ctermfg=214

      " yellow
      hi tsxAttrib ctermfg=190
   " }

"	" Colors {
"		:highlight Comment ctermfg=6 ctermbg=black
"		set t_Co=256
"		"colorscheme asu1dark
"                " Custom color on gpsc {
"                	set background=dark
"                	hi clear
"                	if exists("syntax_on")
"                	  syntax reset
"                	endif
"                	let g:colors_name = "YOUR COLOR NAME"
"
"                	hi Comment guifg=green
"                	hi Constant gui=bold guifg=cyan
"                	hi Cursor guifg=green guibg=#60a060
"                	hi CursorColumn guibg=gray40
"                	hi CursorIM gui=None
"                	hi CursorLine guibg=gray40
"                	hi DiffAdd guibg=slateblue
"                	hi DiffChange guibg=darkgreen
"                	hi DiffDelete gui=bold guifg=blue guibg=coral
"                	hi DiffText gui=bold guibg=olivedrab
"                	hi Directory guifg=cyan
"                	hi Error guifg=white guibg=red
"                	hi ErrorMsg guifg=black guibg=red
"                	hi FoldColumn guifg=white guibg=gray30
"                	hi Folded guifg=cyan guibg=gray30
"                	hi Identifier guifg=cyan
"                	hi Ignore guifg=black
"                	hi IncSearch guibg=steelblue
"                	hi Label guifg=gold2
"                	hi LineNr guifg=darkgray
"                	hi MatchParen guibg=darkcyan
"                	hi ModeMsg gui=bold
"                	hi MoreMsg gui=bold guifg=seagreen
"                	hi NonText gui=bold guifg=brown
"                	hi Normal guifg=cyan guibg=black
"                	hi Operator guifg=orange
"                	hi Pmenu guibg=magenta
"                	hi PmenuSbar guibg=grey
"                	hi PmenuSel guibg=darkgray
"                	hi PmenuThumb gui=reverse
"                	hi PreProc guifg=pink2
"                	hi Question gui=bold guifg=green
"                	hi Search guifg=black guibg=lightslateblue
"                	hi SignColumn guifg=cyan guibg=grey
"                	hi Special guifg=yellow
"                	hi SpecialKey guifg=cyan
"                	hi SpellBad gui=undercurl
"                	hi SpellCap gui=undercurl
"                	hi SpellLocal gui=undercurl
"                	hi SpellRare gui=undercurl
"                	hi Statement guifg=lightblue
"                	hi StatusLine gui=bold guifg=cyan guibg=blue
"                	hi StatusLineNC guifg=lightblue guibg=darkblue
"                	hi TabLine gui=underline guibg=darkgray
"                	hi TabLineFill gui=reverse
"                	hi TabLineSel gui=bold
"                	hi Title gui=bold guifg=darkgray
"                	hi Todo guifg=black guibg=orange
"                	hi Type gui=bold guifg=seagreen
"                	hi Underlined gui=underline guifg=#80a0ff
"                	hi VertSplit gui=reverse
"                	hi Visual gui=reverse
"                	hi VisualNOS gui=bold,underline
"                	hi WarningMsg guifg=black guibg=green
"                	hi WildMenu guifg=black guibg=yellow
"                	hi link Boolean Constant
"                	hi link Character Constant
"                	hi link Conditional Statement
"                	hi link Debug Special
"                	hi link Define PreProc
"                	hi link Delimiter Special
"                	hi link Exception Statement
"                	hi link Float Constant
"                	hi link Function Identifier
"                	hi link Include PreProc
"                	hi link Keyword Statement
"                	hi link Macro PreProc
"                	hi link Number Constant
"                	hi link PreCondit PreProc
"                	hi link Repeat Statement
"                	hi link SpecialChar Special
"                	hi link SpecialComment Special
"                	hi link StorageClass Type
"                	hi link String Constant
"                	hi link Structure Type
"                	hi link Tag Special
"                	hi link Typedef Type
"                " }
"	" }
" }


" Text Formatting/Layout {
   set shiftwidth=3
   "set shiftround
   set tabstop=8
   set expandtab
   set autoindent
   set diffopt=filler,iwhite " Diffopt for gvim 7
" }


" Fix my typos {
   abbr Protage Portage
   abbr virutal virtual
" }


" Mappings {
   " Specific mapping for quick vimdiff merging
   map <F1> :wqa<CR>
   map <F2> ]c
   map <F3> do
   map <F5> :%!xmllint --format --recover --encode UTF-8 -<CR>
   map <F6> :bufdo %!xmllint --format --recover --encode UTF-8 -<CR>
   nnoremap <special> <F7> :call DiffText(@a, @b, g:diffed_buffers)<CR>
   nnoremap <special> <F8> :call WipeOutDiffs(g:diffed_buffers)<CR>
   nnoremap <silent> <F9> :TlistToggle<CR>

   " Tab related convinient shortcuts
   map <C-t><up> :tabr<cr>
   map <C-t>k :tabr<cr>
   map <C-t><down> :tabl<cr>
   map <C-t>j :tabl<cr>
   map <C-t><left> :tabp<cr>
   map <C-t>h :tabp<cr>
   map <C-t><right> :tabn<cr>
   map <C-t>l :tabn<cr>
   map <C-t>t :tabs<cr>

   " Remap search key to always center serach.
   nnoremap n nzz
   nnoremap N Nzz
   nnoremap * *zz
   nnoremap # #zz
   nnoremap g* g*zz
   nnoremap g# g#zz

   " First search for a pattern, then fold everything else with \z
   " Use zr to display more context, or zm to display less context.
   nnoremap \z :setlocal foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\\|\\|(getline(v:lnum+1)=~@/)?1:2 foldmethod=expr foldlevel=0 foldcolumn=2<CR>
" }


" Easy Headers {
   abbr hashHeader # @file# @brief## @author Samuel Larkin## Traitement multilingue de textes / Multilingual Text Processing# Centre de recherche en technologies numériques / Digital Technologies Research Centre# Conseil national de recherches Canada / National Research Council Canada# Copyright 2023, Sa Majeste la Reine du Chef du Canada# Copyright 2023, Her Majesty in Right of Canada

   abbr cHeader /** * @author Samuel Larkin * @file prog.cc * @brief Briefly describe your program here. * * * Traitement multilingue de textes / Multilingual Text Processing * Centre de recherche en technologies numériques / Digital Technologies Research Centre * Conseil national de recherches Canada / National Research Council Canada * Copyright 2023, Sa Majeste la Reine du Chef du Canada * Copyright 2023, Her Majesty in Right of Canada*/

   abbr makeHeader #!/usr/bin/make -f# vim:noet:ts=3:nowrap:filetype=make-include Makefile.params.DEFAULT_GOAL := all.PHONY: allall:.PHONY: cleanclean:
" }


" AL_DIFF="al-diff.py -m '<PORTAGE_DOCUMENT_END>'" AL1=$3 AL2=$4 vimdiff +"set diffexpr=DiffAligment()" +"set diffopt=filler,context:0" $1 $2
function DiffAligment()
   let diff = "al-diff.py"
   silent execute "!" . $AL_DIFF . " " . $AL1 . " " . $AL2 . " " . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction


"
function DiffPa()
   let diff = "~/mybin/diff-pa.py -v "
   "silent execute "!" . diff . " -m \'" $VIMDIFFPA_OPTS . "\'" . v:fname_in . " " . v:fname_new . " > " . v:fname_out
   silent execute "!" . diff . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction


" see ~/.alias vimdiffpa2
function DiffPa2()
   let diff = "~/mybin/diff-pa2.py -v "
   "silent execute "!" . diff . " -m \'" $VIMDIFFPA_OPTS . "\'" . v:fname_in . " " . v:fname_new . " > " . v:fname_out
   silent execute "!" . diff . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction


" Custom diff expression so we can add arguments to diff itself
set diffexpr=MyDiff()
function MyDiff()
   let opt = ""
   if &diffopt =~ "icase"
      let opt = opt . "-i "
   endif
   if &diffopt =~ "iwhite"
      let opt = opt . "-b "
   endif
   silent execute "!diff " . $VIMDIFF_OPT . " -a --binary " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction



" Perl autofolding sub {
"   function GetPerlFold()
"     if getline(v:lnum) =~ '^\s*sub\s'
"       return ">1"
"     elseif getline(v:lnum) =~ '\}\s*$'
"       let my_perlnum = v:lnum
"       let my_perlmax = line("$")
"       while (1)
"         let my_perlnum = my_perlnum + 1
"         if my_perlnum > my_perlmax
"           return "<1"
"         endif
"         let my_perldata = getline(my_perlnum)
"         if my_perldata =~ '^\s*\(\#.*\)\?$'
"           " do nothing
"         elseif my_perldata =~ '^\s*sub\s'
"           return "<1"
"         else
"           return "="
"         endif
"       endwhile
"     else
"       return "="
"     endif
"   endfunction
"   setlocal foldexpr=GetPerlFold()
"   setlocal foldmethod=expr
" }


" Function that allows diffying to buffer in order to diff two functions. {
"enew | call setline(1, split(@a, "\n")) | diffthis | vnew | call setline(1, split(@b, "\n")) | diffthis
   " source: http://stackoverflow.com/questions/3619146/vimdiff-two-subroutines-in-same-file
   let g:diffed_buffers=[]
   function DiffText(a, b, diffed_buffers)
      "enew
      execute 'tab split | enew'
      setlocal buftype=nowrite
      call add(a:diffed_buffers, bufnr('%'))
      call setline(1, split(a:a, "\n"))
      diffthis
      vnew
      setlocal buftype=nowrite
      call add(a:diffed_buffers, bufnr('%'))
      call setline(1, split(a:b, "\n"))
      diffthis
   endfunction
   function WipeOutDiffs(diffed_buffers)
      for buffer in a:diffed_buffers
         execute 'bwipeout! '.buffer
      endfor
      call remove(a:diffed_buffers, 0, -1)
   endfunction
" }


" Quick Code Snippets
" {
   abbr _pudb_ from pudb import set_trace; set_trace()
" }

" [Using ugrep within Vim](https://github.com/Genivia/ugrep#using-ugrep-within-vim) {
   " :grep PATTERN [PATH]
   " :grep PATTERN %
   " :copen
   if executable('ugrep')
      set grepprg=ugrep\ -RInk\ -j\ -u\ --tabs=1\ --ignore-files
      set grepformat=%f:%l:%c:%m,%f+%l+%c+%m,%-G%f\\\|%l\\\|%c\\\|%m
   endif
" }


" Set commands to be run for certain file types.
" {
   " This will auto indent xml file.
   "au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
   "au FileType xml set nowrap

   " Do not expand tabs when editing a Makefile.
   autocmd BufRead,BufNewFile Makefile set noexpandtab

   autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
   " I prefer to enable this when I enter a JavaScript or TypeScript buffer,
   " and disable it when I leave
   autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
   autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear
   autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

   "" Python specifics
   "" Warning: this must be the last thing so it doesn't get overriden.
   "" {
   "au BufNewFile,BufRead *.py
   "    \ set tabstop=3 |
   "    \ set softtabstop=3 |
   "    \ set shiftwidth=3 |
   "    \ set textwidth=79 |
   "    \ set expandtab |
   "    \ set autoindent |
   "    \ set fileformat=unix
   "" }
" }


" Disable Bell
" {
   set visualbell
   set t_vb=
" }
